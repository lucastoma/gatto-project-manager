#!/usr/bin/env python3
"""
Prosty test edge blending - sprawdzenie czy parametry dzia≈ÇajƒÖ
"""

import sys
import os
sys.path.append('.')

print("=== EDGE BLENDING TEST ===")

try:
    from app.algorithms.algorithm_01_palette.algorithm import create_palette_mapping_algorithm
    print("‚úÖ Import algorytmu - OK")
    
    # Stw√≥rz algorytm
    algorithm = create_palette_mapping_algorithm()
    print("‚úÖ Tworzenie instancji - OK")
    
    # Sprawd≈∫ domy≈õlnƒÖ konfiguracjƒô
    config = algorithm.default_config()
    edge_params = {
        'edge_blur_enabled': config.get('edge_blur_enabled', 'MISSING'),
        'edge_blur_radius': config.get('edge_blur_radius', 'MISSING'),
        'edge_blur_strength': config.get('edge_blur_strength', 'MISSING'),
        'edge_detection_threshold': config.get('edge_detection_threshold', 'MISSING'),
        'edge_blur_method': config.get('edge_blur_method', 'MISSING')
    }
    
    print("üîç Parametry edge blending w konfiguracji:")
    for param, value in edge_params.items():
        print(f"  {param}: {value}")
    
    # Sprawd≈∫ czy metody istniejƒÖ
    methods = ['apply_edge_blending', '_detect_palette_edges', '_apply_selective_blur']
    for method in methods:
        if hasattr(algorithm, method):
            print(f"‚úÖ Metoda {method} - istnieje")
        else:
            print(f"‚ùå Metoda {method} - BRAK")
    
    print("\n=== TEST ZAKO≈ÉCZONY ===")
    
except Exception as e:
    print(f"‚ùå B≈ÅƒÑD: {e}")
    import traceback
    traceback.print_exc()
